package <%- modelPackage %>;

import it.water.core.api.*;
import it.water.repository.jpa.model.AbstractJpaEntity;
import it.water.core.validation.annotations.*;

import lombok.*;

import <%-persistenceLib%>.persistence.Access;
import <%-persistenceLib%>.persistence.Table;
import <%-persistenceLib%>.persistence.AccessType;
import <%-persistenceLib%>.persistence.Entity;

import <%-validationLib%>.validation.constraints.*;

/**
 * @Generated by Water Generator
 * <%- projectSuffixUpperCase %> Entity Class.
 *
 */
//JPA
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"exampleField"})) //example of unique constraint
@Access(AccessType.FIELD)
<% if(hasRestServices){ -%>
// Jackson :ignoring technical fields from abstract entity in json serialization
@JsonIgnoreProperties(value = {"systemApiClassName","resourceName"})    
<% } -%>
<%
 let implementedInterfaces = "";
 if(isProtectedEntity || isOwnedEntity){
   implementedInterfaces += " implements ";
   if(isProtectedEntity)
     implementedInterfaces += "ProtectedEntity"
   
   if(isOwnedEntity){
        if(isProtectedEntity)
            implementedInterfaces += ", ";
        implementedInterfaces += "OwnedEntity "
   }
 }
-%>
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@ToString
@EqualsAndHashCode(of = {"id","exampleField"/*todo add more fields for equals and hashcode, remember hashcode and equals are key methods for ORMs*/})
public class <%- projectSuffixUpperCase %> extends AbstractJpaEntity<%-implementedInterfaces%> {
    

    //insert fields...

    //Explanatation: in order to have better code management objects should be encapsulated correctly:
    //public Constructor should be used with required fields (no no-arg constructor, infact water generates the protected default constructor)
    //only relevant setter methods should be exposed outside
    //this approach generates less code and helps in the test coverage phase

    /*
    Example:
    */

    @NoMalitiusCode// --> check to avoid code injections 
    @NotNull //--> field required for rest api 
    @NotNullOnPersist //--> field is required on the database
    @NonNull //--> field is required in the constructor
    @Setter(AccessLevel.PROTECTED)
    @JsonView(WaterJsonView.Public.class) //this fields will be visibile in crud responses
    private String exampleField; 

<% if(isOwnedEntity){ -%>
    @Override
    public it.water.core.api.model.User getUserOwner() {
        //todo add logic to return the user who owns this entity
        return null;
    }

    @Override
    public void setUserOwner(it.water.core.api.model.User user) {
        //todo add logic to set the user who owns this entity
    }
<% } -%>
}