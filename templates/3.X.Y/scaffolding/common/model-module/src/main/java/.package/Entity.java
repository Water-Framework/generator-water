package <%- modelPackage %>;

import it.water.repository.jpa.model.AbstractJpaEntity;
import it.water.core.validation.annotations.*;
import it.water.service.rest.api.WaterJsonView;
<%if(isProtectedEntity || isOwnedEntity){-%>
import it.water.core.api.permission.*;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.annotations.AccessControl;
import it.water.core.permission.annotations.DefaultRoleAccess;
<% } -%>

import lombok.*;

import <%-persistenceLib%>.persistence.*;

import <%-validationLib%>.validation.constraints.*;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonView;

import javax.persistence.*;

<%
 let implementedInterfaces = "";
 let defineActionsAndRolesAnnotation = "";
 if(isProtectedEntity || isOwnedEntity){
   implementedInterfaces += " implements ";
   if(isProtectedEntity){
        defineActionsAndRolesAnnotation = ''+
            '//Actions and default roles access\n'+
            '@AccessControl(availableActions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.REMOVE},\n'+
            'rolesPermissions = {\n'+
            '       //Admin role can do everything\n'+
            '        @DefaultRoleAccess(roleName = "'+projectSuffixUpperCase+'Manager", actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND, CrudActions.REMOVE}),\n'+
            '        //Viwer has read only access\n'+
            '        @DefaultRoleAccess(roleName = "'+projectSuffixUpperCase+'Viewer", actions = {CrudActions.FIND}),\n'+
            '        //Editor can do anything but remove\n'+
            '        @DefaultRoleAccess(roleName = "'+projectSuffixUpperCase+'Editor", actions = {CrudActions.SAVE, CrudActions.UPDATE, CrudActions.FIND})\n'+
            '})';
     implementedInterfaces += "ProtectedEntity"
   }
   
   if(isOwnedEntity){
        if(isProtectedEntity)
            implementedInterfaces += ", ";
        implementedInterfaces += "OwnedEntity "
   }
 }
-%>

/**
 * @Generated by Water Generator
 * <%- projectSuffixUpperCase %> Entity Class.
 *
 */
//JPA
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"exampleField"})) //example of unique constraint
@Access(AccessType.FIELD)
<% if(hasRestServices){ -%>
// Jackson :ignoring technical fields from abstract entity in json serialization
@JsonIgnoreProperties(value = {"systemApiClassName","resourceName"})    
<% } -%>
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@ToString
@EqualsAndHashCode(of = {"id","exampleField"/*todo add more fields for equals and hashcode, remember hashcode and equals are key methods for ORMs*/})
<%- defineActionsAndRolesAnnotation %>
public class <%- projectSuffixUpperCase %> extends AbstractJpaEntity<%-implementedInterfaces%> {
    

    //insert fields...

    //Explanatation: in order to have better code management objects should be encapsulated correctly:
    //public Constructor should be used with required fields (no no-arg constructor, infact water generates the protected default constructor)
    //only relevant setter methods should be exposed outside
    //this approach generates less code and helps in the test coverage phase

    /*
    Example:
    */

    @NoMalitiusCode// --> check to avoid code injections 
    @NotNull //--> field required for rest api 
    @NotNullOnPersist //--> field is required on the database
    @NonNull //--> field is required in the constructor
    @Setter
    @JsonView(WaterJsonView.Public.class) //this fields will be visibile in crud responses
    private String exampleField; 

<% if(isOwnedEntity){ -%>
    @Override
    public it.water.core.api.model.User getUserOwner() {
        //todo add logic to return the user who owns this entity
        return null;
    }

    @Override
    public void setUserOwner(it.water.core.api.model.User user) {
        //todo add logic to set the user who owns this entity
    }
<% } -%>
}