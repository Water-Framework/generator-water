<% if(hasSonarqubeIntegration) { -%>
plugins {
    id("org.sonarqube") version "5.1.0.4882"
}
<% } -%>

allprojects {
<% if(publishModule) { -%>
    project.ext.publishRepoName = "<%- publishRepoName %>"
    project.ext.publishRepoUrl =  "<%- publishRepoUrl %>"
<% if(publishRepoHasCredentials) { -%>
	project.ext.publishRepoUsername =  System.getProperty("publishRepoUsername","noUser")
    project.ext.publishRepoPassword =  System.getProperty("publishRepoPassword","noPassword")
<%  } -%>
<% } -%>
<% if(projectTechnology== "water") {-%>    
    project.ext.<%- projectName %>Version = project.waterVersion
<% } else { -%>
    project.ext.<%- projectName %>Version = '<%- projectVersion %>' 
<% } -%>
    group '<%- projectGroupId %>'
	version project.<%- projectName %>Version
    repositories{
      mavenLocal()
	  mavenCentral()
      maven {
         url "https://plugins.gradle.org/m2/"
      }
      maven {
            url project.acsMavenRepository
      }
	}
	
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'jacoco'
	
<% if(publishModule){ -%>
	publishing {
		repositories {
			maven {
				<% if(publishRepoHasCredentials){ -%>
				credentials {
					username project.publishRepoUsername
					password project.publishRepoPassword
				}
				<% } -%>
				name = project.publishRepoName
				url = project.publishRepoUrl
			}
		}
	}
<% } -%>
 
 <% if(hasSonarqubeIntegration) { -%>
 test {
        finalizedBy jacocoTestReport
    }
 <% } -%>
}

<% if(hasSonarqubeIntegration) { -%>
sonarqube {
    properties {
        // Configurazione globale del progetto Sonar
        property "sonar.projectKey", "<%- projectName %>"
        property "sonar.projectName", "<%- projectName %>"
        property "sonar.projectVersion", project.waterVersion

        // Includes all folder and sources for submodules
        property "sonar.sources", fileTree(dir: '.', include: '**/src/main/java').asPath
        property "sonar.tests", fileTree(dir: '.', include: '**/src/test/java').asPath
        property "sonar.java.binaries", fileTree(dir: '.', include: '**/build/classes').asPath
        property "sonar.test.exclusions", fileTree(dir: '.', include: '**/src/test/java')

        // Global path for jacoco report
        property "sonar.coverage.jacoco.xmlReportPaths", file("${buildDir}/reports/jacoco/jacocoRootReport.xml")

        property "sonar.host.url", System.getProperty("sonar.host.url", "default")
        property "sonar.login", System.getProperty("sonar.login", "default")
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn subprojects.test
    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(
            files(subprojects.collect { project ->
                fileTree(dir: "${project.buildDir}/classes/java/main").exclude("**/src/test/java/**")
            })
    )
    executionData.setFrom(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/test.exec"))
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.destination file("${buildDir}/reports/jacoco/jacocoRootReport.xml")
        html.destination file("${buildDir}/reports/jacoco/jacocoRootReport.html")
    }
}

<% } -%>

